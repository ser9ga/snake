{"version":3,"sources":["modules/Arrows/style.module.css","modules/Square/style.module.css","modules/Screen/style.module.css","modules/ActionButtons/style.module.css","modules/App/style.module.css","modules/Square/index.js","modules/Screen/index.js","common/dictionaries/index.js","modules/Arrows/index.js","modules/ActionButtons/index.js","modules/App/index.js","common/Hooks/useLogic.js","common/Hooks/useGameControl.js","common/Hooks/useMetronome.js","index.js"],"names":["module","exports","Square","isFilled","className","styles","squareWrapper","square","filledSquare","innerSquare","filledInnerSquare","memo","Screen","screen","fieldSize","screenFrame","Array","y","map","row","rowIdY","rowLine","x","rowItem","rowIdX","currentSquareIndex","ActionTypes","DirectionTypes","left","dir","ax","right","up","down","Arrows","dispatchSnakeState","controlHandler","directionParams","type","payload","container","upButtonContainer","buttonContainer","onClick","squareButton","upButton","triangle","leftButtonContainer","leftButton","rightButtonContainer","rightButton","downButtonContainer","downButton","ActionButtons","startOrPauseGame","snakeState","resetGame","buttonPanel","button","isGameRunning","restartFlag","App","useMemo","initSnakeBody","_","index","isTarget","generateInitField","flatMap","j","i","initFieldChanges","reduce","acc","el","concat","prepareNewScreenState","screenState","changes","newScreenState","forEach","change","initSnakeState","isMatchIsOn","isGameOver","body","currentDirection","nextDirection","getSnakeParams","state","copiedState","filteredBodyState","cutTail","shift","direction","cd","currenHead","length","getNextBodyPixel","prev","newHead","getNextTarget","occupied","copiedScreen","splice","unfilledScreenPixels","filter","pix","Math","floor","random","setTargetPixel","newTarget","useReducer","action","nextHeadPlace","newSnakeBodyState","idx","newDirection","stateWithoutTarget","setParams","fillScreen","Error","keyPressHandler","event","preventDefault","ArrowLeft","ArrowRight","ArrowUp","ArrowDown","KeyA","KeyD","KeyW","KeyS","code","useLogic","handler","useEffect","document","addEventListener","removeEventListener","useGameControl","intervalRef","useRef","current","setInterval","clearInterval","useMetronome","screenWrap","actionButtonsWrapper","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.06247b4e.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"style_container__s17Mb\",\"buttonContainer\":\"style_buttonContainer__24aK-\",\"upButtonContainer\":\"style_upButtonContainer__rztdS\",\"leftButtonContainer\":\"style_leftButtonContainer__b0vju\",\"rightButtonContainer\":\"style_rightButtonContainer__1GQKw\",\"downButtonContainer\":\"style_downButtonContainer__1y92o\",\"squareButton\":\"style_squareButton__3S6Wx\",\"triangle\":\"style_triangle__1eMup\",\"upButton\":\"style_upButton__3Ba2t\",\"leftButton\":\"style_leftButton__J1J1t\",\"rightButton\":\"style_rightButton__1Q5h3\",\"downButton\":\"style_downButton__nwZN_\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"squareWrapper\":\"style_squareWrapper__2hx_P\",\"square\":\"style_square__RJiEc\",\"filledSquare\":\"style_filledSquare__1h0_w\",\"innerSquare\":\"style_innerSquare__2d-tr\",\"filledInnerSquare\":\"style_filledInnerSquare__16Gk6\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"App\":\"style_App__3eN9N\",\"screen\":\"style_screen__2I8Xz\",\"screenFrame\":\"style_screenFrame__cvNbC\",\"rowLine\":\"style_rowLine__3hUhg\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"buttonPanel\":\"style_buttonPanel__gHkIT\",\"button\":\"style_button__1bM-f\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"style_container__2Oapd\",\"screenWrap\":\"style_screenWrap__FCDwq\",\"actionButtonsWrapper\":\"style_actionButtonsWrapper__3VPz-\"};","import { memo } from \"react\";\nimport styles from './style.module.css';\n\nconst Square = ({ isFilled }) => {\n    return (\n        <div className={styles.squareWrapper}>\n            <div className={`${styles.square} ${isFilled && styles.filledSquare}`} >\n                <div className={`${styles.innerSquare} ${isFilled && styles.filledInnerSquare}`} />\n            </div>\n        </div>\n    )\n};\n\nexport default memo(Square);\n","import { memo } from \"react\";\nimport Square from \"../Square\";\nimport styles from './style.module.css';\n\nconst Screen = ({ screen, fieldSize }) => {\n    return (\n        <div className={styles.screen}>\n            <div className={styles.screenFrame}>\n                {[...Array(fieldSize.y)].map((row, rowIdY) => (\n                    <div key={rowIdY} className={styles.rowLine}>\n                        {[...Array(fieldSize.x)].map((rowItem, rowIdX) => {\n                            const currentSquareIndex = fieldSize.x * rowIdY + rowIdX;\n\n                            return (\n                                <Square\n                                    key={`${rowIdX}_${rowIdY}`}\n                                    isFilled={screen[currentSquareIndex].isFilled}\n                                />\n                            )\n                        })}\n                    </div>\n                ))}\n            </div>\n        </div>\n    );\n}\n\nexport default memo(Screen);\n","export const ActionTypes = {\n    prepareAndExecNewTurn: 'prepareAndExecNewTurn',\n    controlEventHandler: 'controlEventHandler',\n    startOrPause: 'startOrPause',\n    resetHandler: 'resetHandler',\n    stopInterval: 'stopInterval',\n    startInterval: 'startInterval',\n}\n\nexport const DirectionTypes = {\n    left: {dir: 'backward', ax: 'horizontal'},\n    right: {dir: 'forward', ax: 'horizontal'},\n    up: {dir: 'backward', ax: 'vertical'},\n    down: {dir: 'forward', ax: 'vertical'}\n}","import {ActionTypes, DirectionTypes} from \"../../common/dictionaries\";\nimport styles from \"./style.module.css\";\n\nconst Arrows = ({dispatchSnakeState}) => {\n    const controlHandler = directionParams => dispatchSnakeState({\n        type: ActionTypes.controlEventHandler,\n        payload: directionParams\n    });\n\n    return (\n        <div\n            className={styles.container}\n        >\n            <div\n                className={`${styles.upButtonContainer} ${styles.buttonContainer}`}\n                onClick={() =>  controlHandler(DirectionTypes.up)}\n            >\n                <div className={`${styles.squareButton} ${styles.buttonContainer} ${styles.upButton}`}>\n                    <div className={styles.triangle} />\n                </div>\n            </div>\n            <div\n                className={`${styles.leftButtonContainer} ${styles.buttonContainer}`}\n                onClick={() =>  controlHandler(DirectionTypes.left)}\n\n            >\n                <div className={`${styles.squareButton} ${styles.buttonContainer} ${styles.leftButton}`}>\n                    <div className={styles.triangle} />\n                </div>\n                </div>\n            <div\n                className={`${styles.rightButtonContainer} ${styles.buttonContainer}`}\n                onClick={() =>  controlHandler(DirectionTypes.right)}\n\n            >\n                <div className={`${styles.squareButton} ${styles.buttonContainer} ${styles.rightButton}`}>\n                    <div className={styles.triangle} />\n\n                </div>\n            </div>\n            <div\n                className={`${styles.downButtonContainer} ${styles.buttonContainer}`}\n                onClick={() =>  controlHandler(DirectionTypes.down)}\n            >\n                <div className={`${styles.squareButton} ${styles.buttonContainer} ${styles.downButton}`}>\n                    <div className={styles.triangle} />\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default Arrows","import styles from \"./style.module.css\";\n\nconst ActionButtons = ({startOrPauseGame, snakeState, resetGame}) => {\n    return <div className={styles.buttonPanel}>\n        <button\n            className={styles.button}\n            onClick={startOrPauseGame}\n        >\n            {snakeState.isGameRunning || snakeState.restartFlag ? 'Pause' : 'Start'}\n        </button>\n        <button\n            className={styles.button}\n            onClick={resetGame}\n        >\n            Reset\n        </button>\n    </div>;\n}\n\nexport default ActionButtons","import Screen from \"../Screen\";\nimport { useLogic } from \"../../common/Hooks/useLogic\";\nimport { useGameControl } from \"../../common/Hooks/useGameControl\";\nimport {useMetronome} from \"../../common/Hooks/useMetronome\";\nimport Arrows from \"../Arrows\";\nimport ActionButtons from \"../ActionButtons\";\nimport styles from './style.module.css';\n\nconst App = () => {\n    const {\n        fieldSize,\n        snakeState,\n        dispatchSnakeState,\n        startOrPauseGame,\n        resetGame,\n        keyPressHandler\n    } = useLogic();\n\n    useGameControl(keyPressHandler)\n    useMetronome(snakeState, dispatchSnakeState)\n\n    return (\n        <div className={styles.container}>\n            <div className={styles.screenWrap}>\n                <Screen\n                    screen={snakeState.screen}\n                    fieldSize={fieldSize}\n                />\n            </div>\n            <div className={styles.actionButtonsWrapper}>\n                <ActionButtons\n                    {...{\n                        startOrPauseGame,\n                        snakeState,\n                        resetGame\n                    }}\n                />\n            </div>\n            <Arrows\n                dispatchSnakeState={dispatchSnakeState}\n            />\n        </div>\n    );\n}\n\nexport default App;\n","import { useMemo, useReducer } from \"react\";\nimport {ActionTypes, DirectionTypes} from \"../dictionaries\";\n\nexport const useLogic = () => {\n    const fieldSize = useMemo(() => ({x: 26, y: 18}), []);\n\n    const initSnakeBody = [...Array(4)]\n        .map((_, index) => ({\n            x: index + 4,\n            y: 5,\n            isFilled: !!index,\n            isTarget: false\n        }));\n\n    const generateInitField = useMemo(() => {\n        return [...Array(fieldSize.y)].flatMap((_, j) => [...Array(fieldSize.x)].map((_, i) =>\n            ({\n                x: i,\n                y: j,\n                isFilled: false,\n                isTarget: false\n            })))\n    }, [fieldSize]);\n\n    const initFieldChanges = useMemo(() => {\n        return generateInitField.reduce((acc, el) => {\n            if (el.x === 0 || el.x === fieldSize.x - 1 || el.y === 0 || el.y === fieldSize.y - 1) {\n                return acc.concat({...el, isFilled: true});\n            }\n\n            return acc;\n        }, [])\n    }, [fieldSize]);\n\n\n    const prepareNewScreenState = (screenState, changes) => {\n        let newScreenState = [...screenState];\n        changes.forEach(change => newScreenState[fieldSize.x * change.y + change.x] = change);\n\n        return newScreenState;\n    };\n\n    const initSnakeState = {\n        restartFlag: false,\n        isGameRunning: false,\n        isMatchIsOn: false,\n        isGameOver: false,\n        body: [...initSnakeBody],\n        screen: prepareNewScreenState(generateInitField, initFieldChanges),\n        currentDirection: {dir: 'forward', ax: 'horizontal'},\n        nextDirection: {dir: 'forward', ax: 'horizontal'}\n    };\n\n    const getSnakeParams = state => {\n        let copiedState = {...state};\n        const filteredBodyState = copiedState.body\n        const cutTail = !filteredBodyState[0]['isFilled'] ? filteredBodyState.shift() : {};\n        filteredBodyState[0]['isFilled'] = true;\n        const direction = copiedState.currentDirection.ax === copiedState.nextDirection.ax ? 'currentDirection' : 'nextDirection';\n        const cd = copiedState[direction].ax === 'horizontal' ? 'x' : 'y';\n        const currenHead = {...filteredBodyState[filteredBodyState.length - 1]};\n        const getNextBodyPixel = prev => ({\n            ...prev,\n            [cd]: state[direction].dir === 'forward' ? prev[cd] + 1 : prev[cd] - 1,\n            isTarget: false\n        })\n        const newHead = getNextBodyPixel(currenHead);\n\n        return {\n            filteredBodyState,\n            direction,\n            currenHead,\n            cutTail,\n            getNextBodyPixel,\n            newHead\n        }\n    };\n\n    const getNextTarget = (screen, occupied) => {\n        let copiedScreen = [...screen];\n        occupied.forEach(change => {\n            copiedScreen.splice([fieldSize.x * change.y + change.x], 1);\n        });\n\n        const unfilledScreenPixels = copiedScreen.filter(pix => !pix.isFilled)\n\n        return {\n            ...unfilledScreenPixels[Math.floor(Math.random() * unfilledScreenPixels.length)],\n            isFilled: true,\n            isTarget: true,\n        };\n    };\n\n    const setTargetPixel = state => {\n        const {newHead} = getSnakeParams(state);\n        const newTarget = getNextTarget(\n            state.screen, [...initSnakeBody, newHead]\n        );\n        const newScreenState = prepareNewScreenState(state.screen, [newTarget]);\n\n        return {screen: newScreenState};\n    };\n\n    const snakeStateReducer = (state, action) => {\n        if (action.type === ActionTypes.prepareAndExecNewTurn) {\n            const {\n                filteredBodyState,\n                direction,\n                cutTail,\n                newHead\n            } = getSnakeParams(state);\n\n            const nextHeadPlace = { ...state.screen[fieldSize.x * newHead.y + newHead.x] };\n\n            if (nextHeadPlace.isFilled && !nextHeadPlace.isTarget) {\n                return {\n                    ...state,\n                    isGameRunning: false,\n                    isMatchIsOn: false,\n                    isGameOver: true,\n                    currentDirection: {dir: 'forward', ax: 'horizontal'},\n                    nextDirection: {dir: 'forward', ax: 'horizontal'}\n                }\n            }\n\n            let newSnakeBodyState = [...filteredBodyState];\n\n            if (nextHeadPlace.isTarget) {\n                newSnakeBodyState.splice(1, 0, {...newSnakeBodyState[0], isFilled: false});\n            }\n\n            newSnakeBodyState = newSnakeBodyState\n                .map((pix, idx) => idx === 0\n                    ? { ...pix, isFilled: false }\n                    : pix)\n                .concat(newHead);\n\n            let newScreenState = prepareNewScreenState(state.screen, newSnakeBodyState);\n\n            if (nextHeadPlace.isTarget) {\n                newScreenState = prepareNewScreenState(\n                    newScreenState,\n                    [getNextTarget(newScreenState, [cutTail])]\n                );\n            }\n\n            const newDirection = state[direction];\n\n            return {\n                ...state,\n                screen: newScreenState,\n                body: newSnakeBodyState,\n                currentDirection: newDirection\n            };\n        }\n\n        if (action.type === ActionTypes.controlEventHandler) {\n            const directionParams = action.payload;\n\n            if (!(state.nextDirection.dir === directionParams?.dir\n                    && state.nextDirection.ax === directionParams?.ax)\n                && directionParams\n                && state.isGameRunning) {\n                return {...state, nextDirection: directionParams}\n            }\n\n            return state;\n        }\n\n        if (action.type === ActionTypes.startOrPause) {\n            const {\n                isGameRunning,\n                isMatchIsOn,\n                isGameOver,\n                body,\n                screen\n            } = state;\n\n            const stateWithoutTarget = {\n                ...state,\n                isGameOver: false,\n                isMatchIsOn: true,\n                isGameRunning: !isGameRunning,\n                screen: !isMatchIsOn ?\n                    prepareNewScreenState(generateInitField, [...initFieldChanges, ...initSnakeBody])\n                    : screen,\n                body: isGameOver ? [...initSnakeState.body] : body,\n            }\n\n            return {\n                ...stateWithoutTarget,\n                ...(!isMatchIsOn && setTargetPixel(stateWithoutTarget))\n            }\n        }\n\n        if (action.type === ActionTypes.resetHandler) {\n            const {restartFlag, isGameRunning, isMatchIsOn, isGameOver} = state;\n            const setParams = {\n                isGameRunning: !isMatchIsOn && isGameOver ? true : isGameRunning,\n                isMatchIsOn: !restartFlag ? isGameOver : true\n            };\n\n            const fillScreen = restartFlag || isGameOver ? {\n                screen: prepareNewScreenState(generateInitField, [...initFieldChanges, ...initSnakeBody])\n            } : {};\n\n            const stateWithoutTarget = {\n                ...state,\n                ...initSnakeState,\n                ...setParams,\n                ...fillScreen,\n                restartFlag: restartFlag\n            };\n\n            return {\n                ...stateWithoutTarget,\n                ...(((restartFlag && isMatchIsOn) || isGameOver) && setTargetPixel(stateWithoutTarget))\n            };\n        }\n\n        if (action.type === ActionTypes.stopInterval) {\n            return {\n                ...state,\n                restartFlag: state.isGameRunning || state.isGameOver,\n                isGameRunning: false\n            }\n        }\n\n        if (action.type === ActionTypes.startInterval) {\n            return {\n                ...state,\n                restartFlag: false,\n                isGameRunning: state.restartFlag\n            }\n        }\n\n        return new Error();\n    };\n\n    const [snakeState, dispatchSnakeState] = useReducer(snakeStateReducer, initSnakeState);\n\n    const resetGame = () => {\n        dispatchSnakeState({\n            type: ActionTypes.stopInterval\n        });\n\n        dispatchSnakeState({\n            type: ActionTypes.resetHandler\n        });\n\n        dispatchSnakeState({\n            type: ActionTypes.startInterval\n        });\n    };\n\n    const keyPressHandler = event => {\n        event.preventDefault();\n\n        const directionParams = {\n            ArrowLeft: DirectionTypes.left,\n            ArrowRight: DirectionTypes.right,\n            ArrowUp: DirectionTypes.up,\n            ArrowDown: DirectionTypes.down,\n            KeyA: DirectionTypes.left,\n            KeyD: DirectionTypes.right,\n            KeyW: DirectionTypes.up,\n            KeyS: DirectionTypes.down,\n        }[event.code];\n\n        dispatchSnakeState({\n            type: ActionTypes.controlEventHandler,\n            payload: directionParams\n        });\n\n        if (event.code === 'Space') {\n            startOrPauseGame();\n        }\n\n        if (event.code === 'Backspace') {\n            resetGame();\n        }\n    };\n\n    const startOrPauseGame = () => {\n        dispatchSnakeState({\n            type: ActionTypes.startOrPause\n        })\n    };\n\n    return {\n        fieldSize,\n        snakeState,\n        dispatchSnakeState,\n        startOrPauseGame,\n        resetGame,\n        keyPressHandler\n    };\n}\n","import { useEffect } from 'react';\n\nexport const useGameControl = (keyPressHandler) => {\n    const handler = event => keyPressHandler(event);\n\n    useEffect(() => {\n        document.addEventListener('keydown', handler);\n\n        return () => {\n            document.removeEventListener('keydown', handler);\n        };\n    }, []);\n};\n","import {useEffect, useRef} from \"react\";\nimport {ActionTypes} from \"../dictionaries\";\n\nexport const useMetronome = (snakeState, dispatchSnakeState) => {\n    const intervalRef = useRef();\n\n    useEffect(() => {\n        if (snakeState.isGameRunning) {\n            intervalRef.current = setInterval(\n                () => dispatchSnakeState({ type: ActionTypes.prepareAndExecNewTurn }),\n                150\n            );\n        }\n\n        if (!snakeState.isGameRunning) {\n            clearInterval(intervalRef.current);\n            intervalRef.current = null;\n        }\n    }, [snakeState.isGameRunning]);\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './modules/App';\nimport './globalStyle.css'\n\nReactDOM.render(\n    <React.StrictMode>\n        <App/>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n"],"sourceRoot":""}